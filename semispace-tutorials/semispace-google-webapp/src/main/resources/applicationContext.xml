<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

    <import resource="classpath:org/semispace/persistence/DatabaseService.xml"/>
    <import resource="classpath:META-INF/cxf/cxf.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-extension-soap.xml"/>
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml"/>

    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>

    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>
    
    <context:component-scan base-package="org.semispace.google"/>

    <bean id="semispace" class="org.semispace.SemiSpace"
          factory-method="retrieveSpace" scope="singleton"/>

    <!-- Persistence in database can be activated by uncommenting this. You will
        need to add the configuration spacecfg=mock for hsql database, and spacecfg=live
        for postgresql connection
    <bean id="persistenceAdmin" class="org.semispace.persistence.SemiSpacePersistentAdmin" factory-method="createConnectedAdminInstance" depends-on="semispace" scope="singleton">
        <constructor-arg ref="semispace"/>
        <constructor-arg type="int" value="20000" />
        <constructor-arg type="boolean" value="false" />
        <constructor-arg type="int" value="60000" />            
    </bean>
     -->

    <bean id="googleAddressFetcher" class="org.semispace.google.space.address.GoogleAddressFetcher" init-method="init"
          depends-on="semispace" scope="singleton">
        <property name="space" ref="semispace"/>
        <property name="simultanousLookups" value="1"/>
    </bean>


    <!--
        Definition of an authenticated space. 
    -->
    <!--START SNIPPET: TokenWsSpace -->
    <jaxws:endpoint id="tokenspace" implementor="#tokenspaceproxy"
                    address="/tokenspace"/>

    <bean id="tokenspaceproxy"
          class="org.semispace.ws.TokenWsSpaceImpl">
        <property name="space">
            <ref bean="semispace"/>
        </property>
        <property name="tokenAuthenticator">
            <ref bean="tokenAuthenticator"/>
        </property>
    </bean>

    <bean id="tokenAuthenticator"
          class="org.semispace.google.space.GoogleSpaceAuthenticator">
        <property name="space">
            <ref bean="semispace"/>
        </property>
    </bean>

    <!-- Uncomment this for a proxy that does not insist
          on a token connection. 
        <jaxws:endpoint id="space" implementor="#spaceproxy"
        address="/space" />

    <bean id="spaceproxy"
        class="org.semispace.ws.WsSpaceImpl">
        <property name="space">
            <ref bean="semispace" />
        </property>
    </bean>
    -->
    <!--END SNIPPET: TokenWsSpace -->


    <!--START SNIPPET: springMbeanServer -->
    <bean id="mbeanServer"
          class="org.springframework.jmx.support.MBeanServerFactoryBean">
        <!-- indicate to first look for a server -->
        <property name="locateExistingServerIfPossible" value="true"/>
    </bean>
    <!--
        this bean needs to be eagerly pre-instantiated in order for the exporting to occur;
        this means that it must not be marked as lazily initialized
    -->
    <bean id="exporter"
          class="org.springframework.jmx.export.MBeanExporter">
        <property name="beans">
            <map>
                <entry key="bean:name=semiSpaceStatistics"
                       value-ref="semispace"/>
            </map>
        </property>
        <property name="server" ref="mbeanServer"/>
        <property name="assembler">
            <bean class="org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler">
                <property name="managedMethods">
                    <value>
                        numberOfSpaceElements,numberOfBlockingRead,numberOfBlockingTake,numberOfMissedRead,numberOfMissedTake,numberOfNumberOfListeners,,numberOfRead,numberOfTake,numberOfWrite
                    </value>
                </property>
            </bean>
        </property>
    </bean>
    <!--END SNIPPET: springMbeanServer -->

</beans>
