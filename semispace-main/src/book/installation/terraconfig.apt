				----
				Terracotta configuration
				----

 This chapter <<can be skipped,>> if you are <<not>>
 going to use Terracotta, or if you are not going to
 use Terracotta right away.

 This explanation is aimed at
 {{{http://www.terracotta.org}Terracotta version 3.4.1.}} 

~~~~~~~~~~~~
Configuration of Terracotta
~~~~~~~~~~~~

 You can use SemiSpace's tc-config as a starting point for
 your configuration. 

 You can download the configuration SemiSpace is set up to use
 from the subversion repository: \
 {{{http://www.semispace.org/svn/trunk/tc-config.xml}http://www.semispace.org/svn/trunk/tc-config.xml}} \
 The TIM version can be found here: \
 {{{http://www.semispace.org/svn/trunk/tc-tim.xml}http://www.semispace.org/svn/trunk/tc-tim.xml}}


 The configurations can be modified to your own needs. You find comments inside
 it which should help you along. See Terracotta documentation for
 more information about configuration.

 You want to set the environment variable <<<TC_INSTALL_DIR>>>
 pointing at the, surprise, installation directory of Terracotta:

+----
export TC_INSTALL_DIR=<where you have exploded the terracotta-3.x.x.tar.gz file>
+----
  

~~~~~~~~~~~~
* Using Maven for SemiSpace TIM reference
~~~~~~~~~~~~

 The easiest way of configuring SemiSpace for Terracotta, is to
 use Maven and add a <<<\<repository/\>>>> section in your <<<tc-config.xml.>>>
 This tells Terracotta where it can find these modules:


%{snippet|id=semispaceTimReference|file=tc-tim.xml}

~~ ---
~~ <clients>
~~    <modules>
~~       <repository>%(user.home)/.m2/repository</repository>
~~       <module name="${project.artifactId}"
~~          version="${project.version}"
~~          group-id="${project.groupId}"/>
~~    </modules>
~~ </clients>
~~ ---

 Notice that the bundle reference <<only works with released versions,>> as
 it does not manage to parse "SNAPSHOT" as an integer.

 	--- assuming that your local Maven repository is at:

---
~/.m2/repository
---


~~~~~~~~~~~~
* Jetty TIM module
~~~~~~~~~~~~

  If you are going to use Jetty, you need the jetty 
  {{{http://www.terracotta.org/confluence/display/docs/tim-get}TIM module}}
  for the Terracotta configuration, if this has not already been 
  installed. You can check and obtain it by doing as follows:
 
+--------
$TC_INSTALL_DIR/bin/tim-get.sh list jetty  
$TC_INSTALL_DIR/bin/tim-get.sh install tim-jetty-6.1 2.2.1 org.terracotta.modules
+--------
  
~~~~~~~~~~~~
* Starting the server
~~~~~~~~~~~~

 Start the terracotta server with
 an invocation similar to:
  
+-------------------------------------+
${TC_INSTALL_DIR}/bin/start-tc-server.sh -f some/path/to/config/tc-config.xml 
+-------------------------------------+

 The server part of the configuration file may look something like this:

%{snippet|id=serverConfig|file=tc-config.xml}

 <<Notice>> that you <<need>> to exchange the "%i" with a real DNS name or
 IP address if you are using remote clients that receive the configuration
 from the server. Otherwise they will simply not find the server...

 ~~~~~~~~~~~~ 
* Sharing the configuration with clients
 ~~~~~~~~~~~~
 
 Clients need to use the same configuration as the Terracotta 
 server. This is most easily performed by letting the clients 
 <<retrieve the configuration from the server>> (exchanging
 localhost with the name of your real host if applicable):
 
+------------------------------------+
${TC_INSTALL_DIR}/bin/dso-java.sh -Dtc.config=localhost:9510
+------------------------------------+
 
 In addition to the configuration of the Terracotta server
 itself, you need to either configure up SemiSpace to use
 java objects, or to retrieve the space configuration from
 spring.
 
 The Terracotta configuration can naturally be amended with
 your "other" configuration as well; Just add it. This may 
 be useful if you also want to, lets say,
 {{{http://www.terracotta.org/web-sessions/}
 distribute the webapp session objects.}}
 
 Notice that only <<some configuration highlights>> are presented 
 here. You will benefit from reading more about
 {{{http://www.terracotta.org}Terracotta on their home page.}}


~~~~~~~~~~~~
* POJO configuration
~~~~~~~~~~~~

 This is typically the configuration you will use 
 <outside> a webapp. <<Note that this is not relevant
 if you use the SemiSpace TIM,>> as the TIM will take
 care of the configuration for you.

 If you prefer to obtain a
 distributed reference to Terracotta <<without using 
 {{{http://www.springframework.org/}Spring,}}>>
 you need to add the relevant SemiSpace
 specific class files. 
 
 The relevant configuration snippet for this is: 
   
%{snippet|id=spaceConfig|file=tc-config.xml}

~~~~~~~~~~~~
* Spring configuration
~~~~~~~~~~~~

 If you are running within a webapp, and are using spring, you
 can add the following. <<Note that this is not relevant
 if you use the SemiSpace TIM.>>
 You will need a named configuration
 element <for each> of your webapps. Depending on your scenario, you
 may find it easier / more maintainable to just define and use the 
 application in a POJO manner.
 
%{snippet|id=springSpaceConfig|file=tc-config.xml}


~~~~~~~~~~~~
You can only mix some Terracotta runtime configurations
~~~~~~~~~~~~

 Mixing runtime configurations can give you some hassle.
 Terracotta lives best when running one of the following:

 * Running with a POJO container, such as a standalone console
   program.
 
 * Running Spring configured in a webapp.
 
 * Running POJO-invoked in a webapp.  
 
 []

 It is possible to mix some configurations, but it may involve an
 effort. The reason and explanation can be found here:
 {{{http://forums.terracotta.org/forums/posts/list/505.page}Object
 identity in Terracotta is dependent on the classLoaderName + fully qualified 
 reference name}}.
 
~~~~~~~~~~~~
* Mixing console app and webapp
~~~~~~~~~~~~

 Presuming you are running with Jetty, the following extra
 parameter will interface your console application with
 your webapp:
 
+---------------------------+
-Dcom.tc.loader.system.name="Jetty.path:/some_path"
+---------------------------+

 Terracottas documentation explains this in greater detail.
 The problem is even larger if you are using spring to
 configure the application.
 
~~~~~~~~~~~~
Running with Terracotta within Eclipse
~~~~~~~~~~~~

 For test purposes, or ease of development, you may want to run
 Terracotta within Eclipse. 

 Besides {{{http://www.eclipse.org}Eclipse}} itself, you will need the 
 {{{http://www.terracotta.org/confluence/display/docs/DSO+Eclipse+Plugin+Guide}Terracotta eclipse plugin}}. 
 Activate your project as a "Terracotta DSO project".
 
 If you do not have a <<<tc-config.xml>>> file already, create one as 
 explained above.
 
 Presumably, your program is already using SemiSpace. Then the easiest
 way of testing the Eclipse / Terracotta easiest way of performing tests, is
 to create a {{{http://www.junit.org/}junit test}}.  Then choose to run the tests as
 "Terracotta DSO junit test". This will prompt you to start a local Terracotta server, which
 you may have to do, depending on the contents of you <<<tc-config.xml>>> file.

 Notice that you <<probably want to remove the TIM>> module from 
 the configuration whilst running under Eclipse, as this will make
 the integration fail. Presumably, you do not need Jetty integration
 in Eclipse.
  