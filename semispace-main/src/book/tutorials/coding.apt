				------
				Coding and integration
				------
				

~~~~~~~~~~~~
Stand alone operation
~~~~~~~~~~~~

 In order to use the space in a stand alone fashion in your java code, 
 just obtain a reference to it, and use it. You will need to use threading 
 in order to benefit from it, as you typically will have an application
 thread and a worker thread:
 
%{snippet|id=retrieveSpace|file=semispace-tutorials/semispace-tutorial/src/main/java/org/semispace/space/tutorial/TakeFromSpace.java}

 
~~~~~~~~~~~~
General space usage
~~~~~~~~~~~~

 In order to insert an element into the space, use write:
 
%{snippet|id=intoSpace|file=semispace-tutorials/semispace-tutorial/src/main/java/org/semispace/space/tutorial/InsertIntoSpace.java}

 Similarly, in order to read an element in the space, use:
 
%{snippet|id=readSpace|file=semispace-tutorials/semispace-tutorial/src/main/java/org/semispace/space/tutorial/SearchInSpace.java}

 In order to remove an element from the space do:
 
%{snippet|id=takeFromSpace|file=semispace-tutorials/semispace-tutorial/src/main/java/org/semispace/space/tutorial/TakeFromSpace.java}

 The essential difference, is the <<<read>>> statement. <<<Read>>> can be performed
 repeatedly, whereas <<<take>>> will remove the object from the
 space.
 
~~~~~~~~~~~~
Using notify
~~~~~~~~~~~~
 
 Notify gives you an event containing the XML source of the element
 which matched the registration.
 
 A simple example of this is the following. First you need to register
 a notification:
 
%{snippet|id=startNotification|file=semispace-tutorials/semispace-tutorial/src/main/java/org/semispace/space/tutorial/NotifyFromSpace.java}
 
 In the notification method itself, you perform whatever you want in
 case of notification. The following just prints a statement that 
 explains that an object matching the template is found in the space.
 
%{snippet|id=exampleOfNotification|file=semispace-tutorials/semispace-tutorial/src/main/java/org/semispace/space/tutorial/NotifyFromSpace.java}
 
 Sometimes, you will try to take the Object that has been transported 
 with the notification. Be aware that the object may already have
 disappeared (for instance if it has already been taken). Therefore
 you always need to test your taken object for null.
 
~~~~~~~~~~~~
* Notify and disappearing instance.
~~~~~~~~~~~~

 You may think that a long living notification may be a problem
 if the instance falls down when being distributed with Terracotta.
 This is not the case. The notification
 lives only within the server instance in question, and if it
 disappears, it does not matter - the notification just disappears
 with it. However, the <statistics> will become wrong - in the 
 count of number of listeners, as the listener is not de-registered
 correctly. This is inconsequential.
 
 If you like to cancel the registration, you can do this on the 
 registration lease.
 