<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2008 Erlend Nossum

    Licensed under the Apache License, Version 2.0 (the "License"); 
    you may not use this file except in compliance with the License. 
    You may obtain a copy of the License at 

      http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and 
    limitations under the License.
-->
<tc:tc-config xsi:schemaLocation="http://www.terracotta.org/schema/terracotta-4.xsd" xmlns:tc="http://www.terracotta.org/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<!--START SNIPPET: serverConfig-->
  <servers>

    <!-- When having remote clients in a multiserver setup, you _must_ give the host an IP address -->
    <server host="%i" name="localhost">
      <dso-port>9510</dso-port>
      <jmx-port>9520</jmx-port>
      <l2-group-port>9530</l2-group-port>
      <data>/tmp/terracotta/server-data</data>
      <logs>/tmp/terracotta/server-logs</logs>
      <!-- If you are sharing disk space over nfs or NAS, or are running in single VM modus 
      <dso>
        <persistence>
          <mode>permanent-store</mode>
        </persistence>
      </dso>
       -->
      <dso>
        <persistence>
          <mode>temporary-swap-only</mode>
        </persistence>
      </dso>
    </server>
    <!-- If you have some other server available
    <server host="servername.some.domain" name="servername">
      <dso-port>9510</dso-port>
      <jmx-port>9520</jmx-port>
      <l2-group-port>9530</l2-group-port>
      <data>/tmp/terracotta/server-data</data>
      <logs>/tmp/terracotta/server-logs</logs>
      <dso>
        <persistence>
          <mode>temporary-swap-only</mode>
        </persistence>
      </dso>
    </server>
     -->
    <ha>
      <mode>networked-active-passive</mode>
      <networked-active-passive>
        <election-time>5</election-time>
      </networked-active-passive>
    </ha>
  </servers>
  <clients>
    <logs>terracotta/client-logs</logs>
    <!-- Load jetty-module. Notice that Eclipse integration will fail 
        if TIM support has not been installed. The module version
         may exist in different versions--> 
	<modules>
	    <!-- module name="tim-jetty-6.1" version="2.2.0"/ -->
        <!-- module name="semispace-tim" version="1.2.0" group-id="org.semispace"/ -->
	</modules> 
  </clients>
<!--END SNIPPET: serverConfig-->
  <!--START SNIPPET: spaceConfig-->
  <application>
    <dso>
      <!-- Could not share a common root between different
         contexts even when https://jira.terracotta.org/jira/browse/CDV-272
         indicates I can:
      <app-groups>
        <app-group name="space">
          <web-application>semispace-war</web-application>
          <web-application>semispace-google</web-application>
        </app-group>
      </app-groups>
        -->      
      <instrumented-classes>
        <include>
          <class-expression>org.semispace.HolderContainer</class-expression>
          <honor-transient>true</honor-transient>
        </include>
        <include>
          <class-expression>org.semispace.Holder</class-expression>
          <honor-transient>true</honor-transient>
        </include>
        <include>
          <class-expression>org.semispace.HolderContainer</class-expression>
          <honor-transient>true</honor-transient>
        </include>
        <include>
          <class-expression>org.semispace.HolderElement</class-expression>
          <honor-transient>true</honor-transient>
        </include>
        <include>
          <class-expression>org.semispace.EventDistributor</class-expression>
          <honor-transient>true</honor-transient>
        </include>
        <include>
          <class-expression>org.semispace.SemiSpaceStatistics</class-expression>
          <honor-transient>true</honor-transient>
        </include>
          <include>
             <class-expression>org.semispace.event.SemiEvent</class-expression>
           </include>
          <include>
             <class-expression>org.semispace.event.SemiExpirationEvent</class-expression>
           </include>
        <include>
           <class-expression>org.semispace.event.SemiAvailabilityEvent</class-expression>
         </include>        
        <include>
           <class-expression>org.semispace.event.SemiTakenEvent</class-expression>
         </include>        
        <include>
           <class-expression>org.semispace.event.SemiRenewalEvent</class-expression>
         </include>        
      </instrumented-classes>
      <locks>
        <autolock>
          <method-expression>* org.semispace.HolderContainer.removeHolderById(..)</method-expression>
          <lock-level>write</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderContainer.removeEmptyHeads(..)</method-expression>
          <lock-level>write</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderContainer.addHolder(..)</method-expression>
          <lock-level>write</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderContainer.findById(long,String)</method-expression>
          <lock-level>read</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderContainer.size(..)</method-expression>
          <lock-level>read</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderContainer.retrieveGroupNames(..)</method-expression>
          <lock-level>read</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderContainer.waitHolder(..)</method-expression>
          <lock-level>write</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderContainer.readHolderWithId(..)</method-expression>
          <lock-level>read</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderContainer.retrieveClassNames(..)</method-expression>
          <lock-level>read</lock-level>
        </autolock>
        
        <autolock>
          <method-expression>* org.semispace.HolderElement.size(..)</method-expression>
          <lock-level>read</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderElement.removeHolderById(..)</method-expression>
          <lock-level>write</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderElement.addHolder(..)</method-expression>
          <lock-level>write</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderElement.toArray(..)</method-expression>
          <lock-level>read</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderElement.iterator(..)</method-expression>
          <lock-level>read</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderElement.isWaiting(..)</method-expression>
          <lock-level>read</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.HolderElement.waitHolder(..)</method-expression>
          <lock-level>write</lock-level>
        </autolock>
        
        <autolock>
          <method-expression>* org.semispace.Holder.setLiveUntil(long)</method-expression>
          <lock-level>write</lock-level>
        </autolock>
        <autolock>
          <method-expression>* org.semispace.EventDistributor.distributeEvent(DistributedEvent)</method-expression>
          <lock-level>write</lock-level>
        </autolock>
      </locks>
      <roots>
        <root>
          <field-name>org.semispace.HolderContainer.instance</field-name>
        </root>
      </roots>
      <!-- transient-fields>
        <field-name>org.semispace.SemiSpace.listeners</field-name>
        <field-name>org.semispace.SemiSpace.admin</field-name>
        <field-name>org.semispace.SemiSpace.xStream</field-name>
      </transient-fields -->
      <!-- distributed-methods>
        <method-expression>void org.semispace.SemiSpace.notifyListeners(org.semispace.EventDistributor)</method-expression>
      </distributed-methods  -->
      <distributed-methods>
        <method-expression>void org.semispace.EventDistributor.distributeEvent(org.semispace.DistributedEvent)</method-expression>
      </distributed-methods>      
    </dso>
  <!--END SNIPPET: spaceConfig-->
    
  <!--START SNIPPET: springSpaceConfig-->
  <!--
    Clustering Spring no longer requires special configuration. For more information, see http://www.terracotta.org/spring.
    <spring>
      <jee-application name="*">
        <application-contexts>
          <application-context>
            <paths>
              <path>*.xml</path>
            </paths>
            <beans>
              The other beans to share beside semispace 
              SemiSpace is covered in the dso configuration, and we do NOT need: <bean name="semispace" />
            </beans>
          </application-context>
        </application-contexts>
      </jee-application>
    </spring>-->
  <!--END SNIPPET: springSpaceConfig-->
    <!-- Not presently working:
    <dso>
      <app-groups>
        <app-group name="webAndPojo">
          <web-application>google-webapp</web-application>
          <named-classloader>Jetty.path:/google-webapp</named-classloader>
        </app-group>
      </app-groups>
    </dso>
    -->
  </application>
  
</tc:tc-config>
